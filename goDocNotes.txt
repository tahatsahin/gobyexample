-go.mod file
    When your code imports packages contained in other modules, 
    you manage those dependencies through your code's own module.
    That module is defined by a go.mod file that tracks the modules 
    that provide those packages. That go.mod file stays with your code,
    including in your source code repository.
    To enable dependency tracking for your code by creating a go.mod file, 
    run the go mod init command, giving it the name of the module your code 
    will be in. The name is the module's module path.
    In actual development, the module path will typically be the 
    repository location where your source code will be kept. For example, 
    the module path might be github.com/mymodule. If you plan to publish
     your module for others to use, the module path must be a location 
     from which Go tools can download your module. For more about naming 
     a module with a module path, see Managing dependencies. 
     (https://go.dev/doc/modules/managing-dependencies#naming_module)
     go mod init github.com/tahatsahin/gobyexample

-main package
     Declare a main package (a package is a way to group functions, 
     and it's made up of all the files in the same directory).

-interfaces
     An interface is two things: it is a set of methods, but it is also 
     a type. an example https://href.li/?http://play.golang.org/p/yGTd4MtgD5
     -> The interface{} type:
     all types satisfy the empty interface. That means if you write a
     function that takes an interface{} value as parameter, you can supply
     that function with any value. When some type given to that function,
     go runtime will perform a type conversion and convert the value to 
     an interface{} value. https://href.li/?http://research.swtch.com/interfaces
     Interface value is constructed of two words of data; one word is
     used to "point" to a method table for the value's underlying type, and
     the other word is used to point to the actual data being held by that
     value. 
     !! You cannot convert a []T to a []interface{} directly, you should use
     make to create []interface{} and for loop to copy data.
     
     Careful about pointers and interfaces section... Real-world examples...
     https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go

-generics
     generics is beautiful, try to use them in projects

-channels
     Channels are the pipes that connect concurrent goroutines. 
     You can send values into channels from one goroutine and 
     receive those values into another goroutine.
     make(chan T)
     send a value into a channel using the channel <- syntax.
     the <-channel syntax receives a value from the channel.
     by default, sends and receives block until both sender and receiver
     are ready. This property allowed us to wait at the end of our program
     without having to use any other synchronization.

     By default, channels are unbuffered, they will only accept sends 
     (chan <-) if there is a corresponding receive (<- chan) ready to receive
     the sent value. Buffered channels accept a limited number of values
     without a corresponding receiver for those values.

     we can use channels to sync execution across goroutines.

     you can specify if a channel is meant to only send or receive values
     this specificity increases tje type-safety of the program

-select
     go's select lets ou wait on multiple channel operations.
     combining goroutines and channels with select is a powerful feature.

     each channel will receive a value after some amount of time, to 
     simulate e.g. blocking RPC operations executing in concurrent
     goroutines. use select to await both of these values simultaneously
     printing each one as it arrives.

-timeouts
     timeouts are important for programs that connect to external sources.
     http request has a default of 120 seconds timeout, channel waits for
     an answer for 120 seconds, if no response came, request cancels.

-closing channels
     closing channels can be useful to communicate completion to the
     channel's receives
     it is possible to close a non-empty channel but still have the
     remaining values received. look at range over channels.

-timers
     we often want to execute go code at some point in the future,
     or repeatedly at some interval. Go's built in timer and ticker
     features make both of these tasks easy.

-tickers 
     tickers are for when you want to do something repeatedly at regular
     intervals.

-rateLimiting
     important mechanism for controlling resource utilization and 
     maintaining quality of service. Go supports rate limiting with 
     goroutines, channels and tickers

-atomicCounters
     the primary mechanism for managing state in Go is communication
     over channels. sync/atomic package.

-mutexes
     more complex state, mutex can be used to safely acces data across
     multiple goroutines.

-statefulGoroutines (TODO: leadn more about this... unclear...)
     this channel based approach aligns with go's ideas of sharing memory
     by communicating and having each piece of data owned by exactly 1 
     goroutine

-panic
     a common use of panic is to abort if a function returns an error value
     that we don't know how to handle

-defer
     defer is used to ensure that a function call is performed later in
     a program's execution, usually for purposes of cleanup. 
